<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清涧</title>
  
  <subtitle>让事情是它本来该有的样子</subtitle>
  <link href="https://esyruok.github.io/atom.xml" rel="self"/>
  
  <link href="https://esyruok.github.io/"/>
  <updated>2024-06-10T03:13:13.320Z</updated>
  <id>https://esyruok.github.io/</id>
  
  <author>
    <name>EsYruok</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系统中修改键盘映射</title>
    <link href="https://esyruok.github.io/posts/9f7c0abf/"/>
    <id>https://esyruok.github.io/posts/9f7c0abf/</id>
    <published>2024-01-30T08:16:27.000Z</published>
    <updated>2024-06-10T03:13:13.320Z</updated>
    
    <content type="html"><![CDATA[<p>笔记本键盘的键位一般都是通用键位,一些习惯特殊配列或特殊键位的同学在使用笔记本键盘时都会很苦恼,通常会需要修改键位. 如果笔记本驱动能够使用最好, 可是支持 Linux下可用的驱动程序很少, 我们还可以通过修改系统对键盘的映射来调整键位.<span id="more"></span></p><hr /><ol type="1"><li>找到内置键盘的厂商，型号，版本标识 使用<code>ls /proc/bus/input/devices</code>, 通过Name找到自己的键盘设备信息，比如：<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I: Bus=0003 Vendor=1532 Product=0233 Version=0111</span><br><span class="line">N: Name=&quot;Razer Razer Blade Keyboard&quot;</span><br><span class="line">P: Phys=usb-0000:00:14.0-8/input1</span><br><span class="line">S: Sysfs=/devices/pci0000:00/0000:00:14.0/usb1/1-8/1-8:1.1/0003:1532:0233.0005/input/input11</span><br><span class="line">U: Uniq=</span><br><span class="line">H: Handlers=sysrq kbd event11</span><br><span class="line">B: PROP=0</span><br><span class="line">B: EV=10001f</span><br><span class="line">B: KEY=33eff 0 0 483ffff17aff32d bfd4444600000000 1 130c730b17c007 ffbf7bfad941dfff febeffdfffefffff fffffffff</span><br><span class="line">ffffffe</span><br><span class="line">B: REL=1040</span><br><span class="line">B: ABS=100000000</span><br><span class="line">B: MSC=10</span><br></pre></td></tr></table></figure>记住第一行<code>I: Bus=0003 Vendor=1532 Product=0233 Version=0111</code>后面需要的信息.<br /></li><li>找到要改的键的scancode<br />可以使用<code>evtest</code>工具查看scancode, 安装evtest:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S evtest</span><br></pre></td></tr></table></figure> 执行 <code>sudo evtest</code> 根据提示选择键盘设备,按下你要修改的按键, 得到的信息类似如下:<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Event: time 1691079393.218622, type 4 (EV_MSC), code 4 (MSC_SCAN), value 700e0</span><br><span class="line">Event: time 1691079393.218622, type 1 (EV_KEY), code 29 (KEY_LEFTCTRL), value 1</span><br><span class="line">Event: time 1691079393.218622, -------------- SYN_REPORT ------------</span><br><span class="line">Event: time 1691079398.169693, type 4 (EV_MSC), code 4 (MSC_SCAN), value 70039</span><br><span class="line">Event: time 1691079398.169693, type 1 (EV_KEY), code 58 (KEY_CAPSLOCK), value 1</span><br><span class="line">Event: time 1691079398.169693, -------------- SYN_REPORT ------------</span><br></pre></td></tr></table></figure>可见KEY_LEFTCTRL的scancode是700e0，keycode是29；KEY_CAPSLOCK的scancode是70039，keycode是58</li><li>设置hwdb<br />创建或打开<code>/etc/udev/hwdb.d/90-custom-keyboard.hwdb</code>写入以下内容：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evdev:input:b0003v1532p0233*</span><br><span class="line">  KEYBOARD_KEY_70039=leftctrl</span><br><span class="line">  KEYBOARD_KEY_700e0=capslock</span><br></pre></td></tr></table></figure> b(bus)v(vendor)p(product)要小写,这是我们在第一步得到的信息.然后执行<code>sudo systemd-hwdb update</code>，并重启.</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;笔记本键盘的键位一般都是通用键位,
一些习惯特殊配列或特殊键位的同学在使用笔记本键盘时都会很苦恼,
通常会需要修改键位. 如果笔记本驱动能够使用最好, 可是支持 Linux
下可用的驱动程序很少, 我们还可以通过修改系统对键盘的映射来调整键位.</summary>
    
    
    
    <category term="linux" scheme="https://esyruok.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Linux + Win11 双系统</title>
    <link href="https://esyruok.github.io/posts/a9f101ac/"/>
    <id>https://esyruok.github.io/posts/a9f101ac/</id>
    <published>2024-01-17T00:08:57.000Z</published>
    <updated>2024-06-10T12:43:24.803Z</updated>
    
    <content type="html"><![CDATA[<p>虽然当下 Linux 已经非常强大了, 但是仍然存在某些情况让你不得不使用Windows, 使用双系统就成为了大多数人的选择. 下面介绍以下如何安装一个Linux + Win11 的双系统环境. <span id="more"></span><br />我使用的是 ArchLinux + Win11 的组合. 先安装 Windows 再安装 Linux.</p><h2 id="安装-win11">安装 Win11</h2><p>具体步骤就不详细罗列了, 但是要注意以下两点:</p><ol type="1"><li>使用 Win11 进行分区时会自动创建一个 EFI 分区. (记住这个分区)<br /></li><li>在给 Win11 划分磁盘空间时不要全部划分出去, 给 Linux 预留出空间.</li></ol><h2 id="安装-linux">安装 Linux</h2><p>安装步骤可以参考 <a href="/posts/2a77f85f/" title="搭建ArchLinux桌面环境(一) -- 基本系统安装">搭建ArchLinux桌面环境(一) -- 基本系统安装</a>. 安装过程中要注意以下几点:</p><ol type="1"><li>磁盘分区时不需要再创建一个 EFI 分区, 使用 Windows 的 EFI分区即可.<br /></li><li>给磁盘格式化时注意不要格式化到 Windows 使用的分区.<br /></li><li>安装操作系统过程中, 直接将 Windows 的 EFI 分区挂载到 efi/即可.<br /></li><li>安装结束后 Linux 会将 Windows 的启动记录覆盖, 重启后进入 Linux重建.</li></ol><h2 id="重建-grub-启动项">重建 grub 启动项</h2><ol type="1"><li>安装 os-prober <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S os-prober</span><br></pre></td></tr></table></figure></li><li>修改 /etc/default/grub<br />取消 <strong>GRUB_DISABLE_OS_PROBER=false</strong> 的注释,没有就添加.<br /></li><li>更新 grub<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure> 在输出信息中应该可以看到找到了 Windwos 的启动项.</li></ol><p>重启即可在 grub 启动目录上看到 Windows.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;虽然当下 Linux 已经非常强大了, 但是仍然存在某些情况让你不得不使用
Windows, 使用双系统就成为了大多数人的选择. 下面介绍以下如何安装一个
Linux + Win11 的双系统环境.</summary>
    
    
    
    <category term="linux" scheme="https://esyruok.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建ArchLinux桌面环境(三) -- 桌面美化</title>
    <link href="https://esyruok.github.io/posts/5db2c6f6/"/>
    <id>https://esyruok.github.io/posts/5db2c6f6/</id>
    <published>2024-01-13T09:31:46.000Z</published>
    <updated>2024-06-10T12:40:10.050Z</updated>
    
    <content type="html"><![CDATA[<p>最后一篇介绍以下Gnome桌面美化. <span id="more"></span><br />另外两篇:<br /><a href="/posts/2a77f85f/" title="搭建ArchLinux桌面环境(一) -- 基本系统安装">搭建ArchLinux桌面环境(一) -- 基本系统安装</a><br /><a href="/posts/2ab5f660/" title="搭建ArchLinux桌面环境(二) -- 常用软件安装">搭建ArchLinux桌面环境(二) -- 常用软件安装</a></p><p>美化一般就是壁纸 + 主题 + 插件. 壁纸就不提了设置中可以很容易的设置,主要介绍一下插件和主题.</p><h4 id="如何安装插件">如何安装插件</h4><ol type="1"><li>安装 gnome-browser-connector<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome-browser-connector</span><br></pre></td></tr></table></figure></li><li>安装浏览器插件<br />使用 firefox 打开 Gnome 插件地址 extensions.gnome.org.<br />首次打开页面中会提示 <strong>Click here to install browserextension</strong> 点击安装插件.<br />浏览器会弹窗提示是否允许安装插件, 选择 <strong>Continue toInstallation</strong> 完成安装即可.<br />重启 firefox.<br /></li><li>安装 Gnome 插件<br />进入 extensions.gnome.org 搜索想要安装的插件, 进入插件详情页面点击<strong>OFF/NO</strong> 按钮即可控制插件开关,如果该插件未安装则会出现安装提示. (安装 Dash to dock 尝试一下)<br /></li><li>插件管理<br />可以使用插件网页, 也可以使用Gnome自带的应用程序Extensions.</li></ol><p>Gnome 桌面美化插件占了很大的一笔.现在可以浏览插件网址安装你想要的插件了.</p><h4 id="tweaks">Tweaks</h4><p>tweaks 是一个帮助我们管理 Gnome 桌面环境的软件, 它可以方便的管理主题,字体, 窗口样式等设置.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome-tweaks --noconfirm</span><br></pre></td></tr></table></figure></p><h4 id="安装主题">安装主题</h4><ol type="1"><li>开启 user-themes 插件<br />这是一个系统插件, 打开 Extensions 程序可以看到所有已安装的插件,在里面点开即可.</li><li>下载主题并安装<br /><a href="www.gnome-look.org">Gnome-look</a>是一个很好的寻找主题的地方.下载主题压缩包后解压到 ** ~/.themes** 或者<strong>/usr/share/themes</strong> 中.<br />但是!! 强烈建议进入主题的 github页面使用作者提供的安装方式,方便省力.<br /></li><li>更改主题<br />使用 user-themes 或者 Tweaks 去选择主题.<br />GNOME 43 之后部分程序使用了 Libadwaita (比如 Files),这些程序目前不支持自定义主题, 如果想更改只能通过覆盖 gtk-4.0 的配置文件.这种方式非常不灵活但也是目前唯一的方法.这里没有深研究具体覆盖哪些文件，主题作者一般会在自己仓库的安装说明中介绍如何使用自身提供的安装脚本完成这一目的.</li></ol><h4 id="orchis">Orchis</h4><p>我使用的主题是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZpbmNlbGl1aWNlL09yY2hpcy10aGVtZQ==">Orchis-theme<i class="fa fa-external-link-alt"></i></span>.<br />必要条件:</p><ul><li>gnome-themes-extra<br /></li><li>gtk-engine-murrine<br /></li><li>sassc</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S gnome-themes-extra gtk-engine-murrine sassc</span><br></pre></td></tr></table></figure><blockquote><p>Note: 这个主题与插件 Blur my shell 有冲突, 不要开启此插件.</p></blockquote><p>安装主题:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/Orchis-theme.git</span><br><span class="line"><span class="built_in">cd</span> Orchis-theme</span><br><span class="line">./install.sh -t purple </span><br><span class="line">./install.sh -l -c dark -t purple </span><br></pre></td></tr></table></figure></p><h4 id="推荐安装插件">推荐安装插件</h4><ul><li>Input Method Pannel<br />输入法需要使用这个插件来显示候选面板</li><li>Dash to dock<br />dock栏</li><li>Coverflow Alt-tab<br />窗口切换动画</li><li>Compiz alike magic lamp effect<br />窗口最小化动画效果</li><li>Compiz windows effect<br />窗口移动动画效果</li><li>AppIndicator and KStatusNotifierItem Support<br />程序托盘图标</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最后一篇介绍以下Gnome桌面美化.</summary>
    
    
    
    <category term="linux" scheme="https://esyruok.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建ArchLinux桌面环境(二) -- 常用软件安装</title>
    <link href="https://esyruok.github.io/posts/2ab5f660/"/>
    <id>https://esyruok.github.io/posts/2ab5f660/</id>
    <published>2024-01-13T09:31:43.000Z</published>
    <updated>2024-06-10T10:17:03.963Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章我们安装了一个最基本的ArchLinux以及Gnome桌面,本篇介绍一些常用软件的安装方法. <span id="more"></span><br />另外两篇:<br /><a href="/posts/2a77f85f/" title="搭建ArchLinux桌面环境(一) -- 基本系统安装">搭建ArchLinux桌面环境(一) -- 基本系统安装</a><br /><a href="/posts/5db2c6f6/" title="搭建ArchLinux桌面环境(三) -- 桌面美化">搭建ArchLinux桌面环境(三) -- 桌面美化</a></p><h4 id="pacman">Pacman</h4><p>在介绍其他软件之前,先介绍以下Arch中最基本的包管理器pacman的使用方法.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S package_name     <span class="comment"># 安装软件包</span></span><br><span class="line">sudo pacman -Syyu               <span class="comment"># 升级系统 yy标记强制刷新 u标记升级动作</span></span><br><span class="line">sudo pacman -R package_name     <span class="comment"># 删除软件包</span></span><br><span class="line">sudo pacman -Rs package_name    <span class="comment"># 删除软件包，及其所有没有被其他已安装软件包使用的依赖包</span></span><br><span class="line">sudo pacman -Qdt                <span class="comment"># 找出孤立包 Q为查询本地软件包数据库 d标记依赖包 t标记不需要的包 dt合并标记孤立包</span></span><br><span class="line">sudo pacman -Rs $(pacman -Qtdq) <span class="comment"># 删除孤立软件包</span></span><br><span class="line">pacman -Ss package_name         <span class="comment"># 正则查询软件包</span></span><br></pre></td></tr></table></figure></p><h4 id="yaypaur">Yay/paur</h4><p>Aur即Arch User repository是Arch特色仓库. yay/paur则是包管理工具,它可以同时使用Aur和标准仓库的资源, 使用方法与pacman 一样.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -Sy --needed git base-devel</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure> paur:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S --needed git base-devel</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/paru.git</span><br><span class="line"><span class="built_in">cd</span> paru</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure></p><h4 id="中文字体">中文字体</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S noto-fonts-cjk noto-fonts-emoji noto-fonts-extra</span><br></pre></td></tr></table></figure><p>安装完就可以去设置里将系统切换成中文的了.</p><h4 id="浏览器">浏览器</h4><p>选择firefox就是选择最少的折腾. :&gt;<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S firefox</span><br></pre></td></tr></table></figure></p><h4 id="显卡驱动">显卡驱动</h4><p>环境关键字: arch + Nvidia + Intel + Wayland</p><ol type="1"><li><p>安装显卡驱动<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S mesa lib32-mesa vulkan-intel lib32-vulkan-intel <span class="comment"># intel 显卡</span></span><br><span class="line">sudo pacman -S nvidia nvidia-utils nvidia-settings lib32-nvidia-utils <span class="comment"># nvidia 显卡</span></span><br><span class="line">sudo pacman -S nvidia-prime <span class="comment"># 动态切换, 在想要使用独显的程序前加 prime-run 前缀</span></span><br></pre></td></tr></table></figure></p></li><li><p>修改 gdm 配置文件<br />编辑 /etc/gdm/custom.conf 取消注释并修改为<code>WaylandEnable=true</code></p></li><li><p>更新Mkinitcpin<br />编辑 /etc/mkinitcpin.conf 修改 <code>MODULES=()</code> 为:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)</span><br></pre></td></tr></table></figure> 保存后执行<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mkinitcpin -P</span><br></pre></td></tr></table></figure></p></li><li><p>添加内核参数<br />nvidia_drm.modeset=1 这个我们在前面已经添加过了.</p></li><li><p>禁用 GDM udev 规则<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">    sudo <span class="built_in">ln</span> -s /dev/null /etc/udev/rules.d/61-gdm.rules</span><br><span class="line"></span><br><span class="line">&gt; Wayland 下 optimus-manager 已经不好使用了, 按照上述的步骤最终只能达到 hybrid 的效果, Nv显卡通电, 想要使用需要在程序前加 prime-run. 想要看使用 Nv 运行了哪些程序可以使用 nvidia-smi  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### VmwareTools  </span></span><br><span class="line">```sh</span><br><span class="line">sudo pacman -S open-vm-tools gtkmm3 --noconfirm</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmtoolsd vmware-vmblock-fuse</span><br></pre></td></tr></table></figure></p></li></ol><h4 id="nerd-字体">Nerd 字体</h4><p>这个字体在配置 nvim zsh 等很多地方都能用到.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S ttf-jetbrains-mono-nerd</span><br></pre></td></tr></table></figure> 手动安装方法:</p><ol type="1"><li>在 <code>usr/share/fonts</code> 或 <code>.locale/share/fonts</code>下建立属于你字体的目录.<br /></li><li>将字体文件全部解压到文件夹中.<br /></li><li>修改所有 ttf 文件权限为 644.<br /></li><li>刷新字体缓存 <code>sudo fc-cache -fv</code></li></ol><h4 id="输入法">输入法</h4><p>我选择了fcitx5.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S fcitx5 fcitx5-im fcitx5-chinese-addons </span><br><span class="line">yay -S fcitx5-input-support</span><br></pre></td></tr></table></figure> 添加环境变量<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure> 输入法候选面板需要 Gnome 插件Input Method Pannel支持.怎么安装插件看一下 <a href="/posts/5db2c6f6/" title="搭建ArchLinux桌面环境(三) -- 桌面美化">搭建ArchLinux桌面环境(三) -- 桌面美化</a><br />打开fcitx5-configuration, 点击Run Fcitx5,从右侧找到输入法添加到左侧确认即可.</p><h4 id="dialect">Dialect</h4><p>一款翻译软件.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S dialect</span><br></pre></td></tr></table></figure></p><h4 id="猫咪魔法">猫咪魔法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S clash-verge-rev-bin</span><br></pre></td></tr></table></figure><h4 id="openvpn">Openvpn</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S openvpn</span><br></pre></td></tr></table></figure><p>为了支持旧版本的加密算法, 需要在 .ovpn 配置文件中增加以下配置.<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data-ciphers BF-CBC</span><br><span class="line">data-ciphers-fallback BF-CBC</span><br><span class="line">providers legacy default</span><br></pre></td></tr></table></figure> 使用时执行<code>sudo openvpn --config xxxx.ovpn</code>.</p><h4 id="remmina">Remmina</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S remmina freerdp</span><br></pre></td></tr></table></figure><h4 id="vscode">vscode</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S code </span><br><span class="line">yay -S code-oss-marketplace</span><br></pre></td></tr></table></figure><h4 id="zsh">Zsh</h4><blockquote><p>Zsh需要使用noto字体</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S zsh zsh-completions</span><br></pre></td></tr></table></figure><p>执行 <code>zsh</code> 运行安装向导(没什么用直接关了就行,后面还有oh-my-zsh), 也可以手动执行, 在 zsh 下执行<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">autoload</span> -Uz zsh-newuser-install</span><br><span class="line">zsh-newuser-install -f</span><br></pre></td></tr></table></figure> 设置 zsh 为默认 shell.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chsh -l <span class="comment"># list all shell</span></span><br><span class="line">chsh -s /usr/bin/zsh <span class="comment"># change default shell to zsh</span></span><br></pre></td></tr></table></figure> 安装 oh-my-zsh.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure> 设置插件, 编辑~/.zshrc修改plugins:<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins = (git z sudo web-search)</span><br></pre></td></tr></table></figure> 安装powerlevel10k主题. 这是Arch的安装方法, powerlevel10k的仓库有详细的各种安装方式.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S zsh-theme-powerlevel10k-git</span><br></pre></td></tr></table></figure> 配置进配置文件 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme&#x27;</span> &gt;&gt;~/.zshrc</span><br></pre></td></tr></table></figure>然后使用<code>exec zsh</code>来重启zsh,应该会自动执行powerlevel10k的配置向导,也可以执行<code>p10k configure</code>来手动执行向导,跟随向导来配置你想要的款式.</p><h4 id="sunlogin">Sunlogin</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S sunloginclient</span><br><span class="line">sudo systemctl start runsunloginclient.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> runsunloginclient.service <span class="comment"># 如果不想让服务一直在后台运行每次使用前记得 start</span></span><br></pre></td></tr></table></figure><h4 id="waydroid">Waydroid</h4><p>要使用 Waydroid 必须在 Wayland 下, 使用<code>echo $XDG_SESSION_TYPE</code> 来检查. 并且需要使用 binder模块.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S binder_linux-dkms</span><br><span class="line">sudo modprobe binder_linux</span><br><span class="line">su</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;binder_linux&quot;</span> &gt;&gt; /etc/modules-load.d/binder.conf</span><br></pre></td></tr></table></figure> 安装waydroid<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S waydroid</span><br><span class="line">sudo waydroid init</span><br><span class="line">sudo systemctl start waydroid-container</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> waydroid-container</span><br></pre></td></tr></table></figure> 一些常用命令<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">waydroid app install xxx.apk <span class="comment"># 安装 apk</span></span><br><span class="line"></span><br><span class="line">waydroid prop <span class="built_in">set</span> persist.waydroid.multi_windows <span class="literal">true</span> <span class="comment"># 设置多窗口模式，记得重启服务</span></span><br><span class="line"></span><br><span class="line">sudo systemctl status waydroid-container <span class="comment"># 排障可能用到的命令</span></span><br><span class="line">sudo waydroid logcat</span><br><span class="line">waydroid <span class="built_in">log</span></span><br></pre></td></tr></table></figure> 删除 Waydroid<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">waydroid session stop</span><br><span class="line">sudo systemctl stop waydroid-container</span><br><span class="line">yay -Rsn waydroid</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/waydroid ~/.local/share/application/*aydroid* ~/.local/share/waydroid</span><br></pre></td></tr></table></figure>为了精简，只涉及到够用的步骤，还有关于Arm转译，Google注册等内容可进一步查看文档<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvV2F5ZHJvaWQ=">Waydroid<i class="fa fa-external-link-alt"></i></span>.<br />再推荐一篇博客 <span class="exturl" data-url="aHR0cHM6Ly9pdm9uYmxvZy5jb20vcG9zdHMvYXJjaGxpbnV4LXdheWRyb2lk">WayDroid教学<i class="fa fa-external-link-alt"></i></span></p><h4 id="wayland">Wayland</h4><p>Wayland这东西毕竟比较新, 各个开发者适配的进度不一,下面是我查阅到的一些资料留作备用,在遇到程序对wayland兼容有问题时可以试一试.<br />- gtk3/4默认支持Wayland.<br />- Qt想要支持Wayland安装qt5-wayland/qt6-wayland.想要显式设置的话设置环境变量 QT_QPA_PLATFORM=wayland.<br />- Electron (&gt;= 28) 则需要设置环境变量 ELECTRON_OZONE_PLATFORM_HINT 为auto 或 wayland. (环境变量的优先级低于参数)还可以使用给应用程序添加参数或写到配置文件 ~/.config/electron-flags.conf中.<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--enable-features=WaylandWindowDecorations # 解决缺少顶栏</span><br><span class="line">--ozone-platform-hint=auto</span><br></pre></td></tr></table></figure></p><h4 id="声音问题">声音问题</h4><p>(VMware 环境中, 实体机器没发现有异常)安装 Gnome 时使用了 pipewire,但是声音会爆裂断断续续的. 不会调试具体原因查阅资料也没弄明白.所以先选择安装 pulseaudio 代替.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -R pulse-native-provider <span class="comment"># 与 pulseaudio 冲突的包有依赖, 先删除</span></span><br><span class="line">sudo pacman -S alsa-utils pulseaudio pavucontol</span><br><span class="line">systemctl --user <span class="built_in">enable</span> pulseaudio.service pulseaudio.socket </span><br></pre></td></tr></table></figure></p><blockquote><p>安装完成后声音是正常了, 但是重启后发生一种现象就是,静音播放视频可以播放, 一旦开了声音视频就卡死了. 查阅资料找到一个方案.修改配置文件 <code>/etc/pulse/default.pa</code>, 注释行<code>load-module module-suspend-on-idle</code>.</p></blockquote><h4 id="f区按键映射">F区按键映射</h4><p>F1 - F12 被映射成多媒体按键<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 | sudo <span class="built_in">tee</span> /sys/module/hid_apple/parameters/fnmode</span><br></pre></td></tr></table></figure> 看看是否恢复正常, 如果正常了就将他写入配置文件.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;options hid_apple fnmode=0&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/modprobe.d/hid_apple.conf</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上篇文章我们安装了一个最基本的ArchLinux以及Gnome桌面,
本篇介绍一些常用软件的安装方法.</summary>
    
    
    
    <category term="linux" scheme="https://esyruok.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建ArchLinux桌面环境(一) -- 基本系统安装</title>
    <link href="https://esyruok.github.io/posts/2a77f85f/"/>
    <id>https://esyruok.github.io/posts/2a77f85f/</id>
    <published>2024-01-12T12:04:15.000Z</published>
    <updated>2024-06-10T12:26:44.283Z</updated>
    
    <content type="html"><![CDATA[<p>ArchLinux是一个以简洁, 高效, 用户完全控制为目标的Linux发行版,非常适合喜欢自定义系统的朋友. 文章分成了三个部分, 系统安装 + 软件安装 +桌面美化. 本篇记录了ArchLinux基本系统以及桌面环境的安装步骤.<span id="more"></span><br />另外两篇:<br /><a href="/posts/2ab5f660/" title="搭建ArchLinux桌面环境(二) -- 常用软件安装">搭建ArchLinux桌面环境(二) -- 常用软件安装</a><br /><a href="/posts/5db2c6f6/" title="搭建ArchLinux桌面环境(三) -- 桌面美化">搭建ArchLinux桌面环境(三) -- 桌面美化</a></p><blockquote><p>要特别感谢 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMv">ArchTurorial<i class="fa fa-external-link-alt"></i></span>的教程, 是一份非常详细的 ArchLinux 安装教程,对我在接触使用Arch的过程中提供了非常大的帮助.</p></blockquote><hr /><p>在开始安装前的准备工作:</p><ul><li>前往 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnLw==">Arch官网<i class="fa fa-external-link-alt"></i></span>下载最新的ISO文件</li><li>制作U盘启动盘 (虚拟机直接挂在ISO即可)<ul><li>Win 下建议使用 rufus<br /></li><li>Linux 下使用命令<br /><code>sudo dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync</code></li></ul></li><li>调整主板设置,启动模式为UEFI,关闭安全启动</li></ul><h2 id="基本系统安装">基本系统安装</h2><p>Arch没有提供一个GUI的安装界面,安装过程完全使用命令一步一步进行构造.</p><blockquote><p>虽然Arch也提供了一个安装脚本 <strong>archinstall</strong>快速安装,不过建议在熟悉 Arch 之后再使用这种方式.</p></blockquote><h4 id="检查是否是uefi启动">检查是否是UEFI启动</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><p>如果是则会输出一堆文件名,如果不是则找不到这个文件夹.</p><h4 id="连接网络">连接网络</h4><p>插入网线或虚拟机调整成桥接即可使用网络,如果使用无线网则使用下面的步骤连接你的wifi.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">iwctl</span><br><span class="line">device list <span class="comment"># 列出设备名, 例如: wlan0</span></span><br><span class="line">station wlan0 scan <span class="comment"># 使用设备 wlan0 扫描网络</span></span><br><span class="line">station wlan0 get-networks <span class="comment"># 列出扫描到的网络</span></span><br><span class="line">station wlan0 connect YOUR-WIRELESS-NAME <span class="comment"># 连接网络, 过程中会提示输入密码</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出iwctl</span></span><br></pre></td></tr></table></figure> 等待几秒用<code>ping</code>测试一下网络.</p><blockquote><p>如果熟悉了设备信息,可以进入iwctl后直接<code>station wlan0 connect YOUR-WIRELESS-NAME</code>连接.</p></blockquote><h4 id="同步系统时间">同步系统时间</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="转换磁盘分区格式">转换磁盘分区格式</h4><p>UEFI 要使用 GPT 格式的磁盘分区.</p><blockquote><p>会擦除磁盘全部数据, 如果你正在做双系统, 跳过过这一步.</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsblk                       <span class="comment"># 显示所有block设备信息, 找到你想要安装的硬盘名称 例如: sda</span></span><br><span class="line">parted /dev/sda             <span class="comment"># 使用 parted + mktable 将磁盘类型转换成gpt</span></span><br><span class="line">(parted)mktable             <span class="comment"># 进入 parted 命令后会显示 (parted) 输入 mktable</span></span><br><span class="line">New disk label <span class="built_in">type</span>? gpt    <span class="comment"># 输入 gpt</span></span><br><span class="line">quit                        <span class="comment"># 退出 parted</span></span><br></pre></td></tr></table></figure><h4 id="磁盘分区">磁盘分区</h4><p>磁盘分区根据个人需求进行自定义,要注意磁盘分区会清除磁盘中的全部内容.</p><blockquote><p>一个比较通用的方案<br />EFI分区:800M <code>/efi</code><br />根目录: 100G <code>/</code><br />home目录: 剩余全部 <code>/home</code></p></blockquote><p>使用cfdisk进行分区, 分区时建议将EFI分区作为第一个分区.其中EFI分区要使用<strong>EFI system</strong>类型, 其余使用<strong>Linuxfilesystem</strong>类型.</p><blockquote><p>如果你正在做双系统, 不需要创建EFI分区,你应该可以看到Win已经创建好的EFI分区.</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cfdisk /dev/sda</span><br></pre></td></tr></table></figure><p>完成后使用<code>fdisk -l</code>检查以下分区情况是否正确.</p><h4 id="格式化分区">格式化分区</h4><p>EFI分区格式化为vfat文件系统, 其他格式化为ext4.</p><blockquote><p>如果你在做双系统, 注意不要格式化efi分区与Win使用的分区.</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkfs.vfat /dev/sda1 <span class="comment"># efi</span></span><br><span class="line">mkfs.ext4 /dev/sda2 <span class="comment"># root</span></span><br><span class="line">mkfs.ext4 /dev/sda3 <span class="comment"># home</span></span><br></pre></td></tr></table></figure><h4 id="挂载分区">挂载分区</h4><p>我们将分区依次以操作系统的布局挂载到/mnt下面,就好比挂载了另一个操作系统.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount /dev/sda2 /mnt <span class="comment"># 这是我们新系统的根分区</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/efi  <span class="comment"># 创建efi目录</span></span><br><span class="line">mount /dev/sda1 /mnt/efi <span class="comment"># 将EFI分区挂载到efi目录上</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/home <span class="comment"># 创建home目录</span></span><br><span class="line">mount /dev/sda3 /mnt/home <span class="comment"># 将home分区挂载到home目录上</span></span><br></pre></td></tr></table></figure></p><h4 id="选择镜像源">选择镜像源</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>编辑mirrorlist文件,将下面的源添加到最前面(如果你了解你的网络按照合适你自己的编辑).<br /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 中科大和清华的源</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure></p><blockquote><p>Linux使用镜像源时会在mirrorlist中从上到下依次尝试每一个源,直到选择一个可用的源, 所以应当将速度快的服务器放在顶端.</p></blockquote><p>也可以借助 reflector 工具:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S reflector <span class="comment"># 安装reflector </span></span><br><span class="line">reflector --verbose -l 200 -p https --<span class="built_in">sort</span> rate --save /etc/pacman.d/mirrorlist <span class="comment"># 选择最快的镜像源</span></span><br><span class="line">reflector --verbose --country <span class="string">&#x27;China&#x27;</span> -l 200 -p https --<span class="built_in">sort</span> rate --save /etc/pacman.d/mirrorlist <span class="comment"># 选择在中国的最快镜像源</span></span><br></pre></td></tr></table></figure></p><h4 id="安装系统">安装系统</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base linux... <span class="comment"># 看下面</span></span><br></pre></td></tr></table></figure><blockquote><p>base : 基础系统工具和库<br />base-devel : 一些用来构建和编译软件使用的工具和库<br />linux : Linux内核<br />linux-headers : 内核头文件, 帮助编译内核模块和驱动<br />linux-firmware : 一些常见的硬件固件<br />dhcpcd : DHCP客户端<br />iwd : 无线网管理工具(不使用无线网可以不用)<br />bash-completion : 命令补全工具<br />neovim : 终端文本编辑器<br />git : git 工具, 后面很多软件安装要使用到它</p></blockquote><h4 id="生成-fstab-文件">生成 fstab 文件</h4><p>fstab 文件用于定义系统启动要自动挂在的磁盘分区与文件系统.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure></p><h4 id="change-root">Change root</h4><p>chroot 能够改变当前环境的根目录,就好比切换到了另一个系统环境中.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt </span><br></pre></td></tr></table></figure> 切换进新安装的系统环境中做一些配置. 就像我们使用 GUI界面安装系统时设置一些内容一样.</p><h4 id="设置时区">设置时区</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc </span><br></pre></td></tr></table></figure><h4 id="设置-locale-信息">设置 Locale 信息</h4><p>locale 信息影响系统中的字符编码, 货币日期时间等信息的显示方式.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /etc/locale.gen</span><br></pre></td></tr></table></figure>编辑locale.gen去掉<strong>en_US.UTF-8</strong>和<strong>zh_CN.UTF-8</strong>的注释,然后执行:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;LANG=en_US.UTF-8&#x27;</span> &gt; /etc/locale.conf <span class="comment"># 设置成英文, 我们还没安装中文字体</span></span><br></pre></td></tr></table></figure></p><h4 id="设置主机名">设置主机名</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /etc/hostname <span class="comment"># 直接写入自定义的名称就行 例如: you_hostname</span></span><br></pre></td></tr></table></figure><h4 id="设置-hosts-文件">设置 hosts 文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /etc/hosts</span><br><span class="line"><span class="comment"># 127.0.0.1   localhost  </span></span><br><span class="line"><span class="comment"># ::1         localhost  </span></span><br><span class="line"><span class="comment"># 127.0.1.1   you_hostname  </span></span><br></pre></td></tr></table></figure><h4 id="设置root密码">设置root密码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure><h4 id="安装处理器微码">安装处理器微码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S intel-ucode <span class="comment"># Intel </span></span><br><span class="line">pacman -S amd-ucode <span class="comment"># AMD</span></span><br></pre></td></tr></table></figure><h4 id="安装引导程序">安装引导程序</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB</span><br></pre></td></tr></table></figure><p>修改grub配置文件设置内核启动参数 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /et/cdefault/grub</span><br></pre></td></tr></table></figure></p><p>编辑grub 文件, 修改<strong>GRUB_CMDLINE_LINUX_DEFAULT="loglevel=5nowatchdog nvidia_drm.modeset=1</strong>, 保存并执行:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>quite : 抑制大多数的启动信息, 仅显示错误信息<br /></li><li>loglevel : 内核日志的详细程度, 3代表错误信息,5代表普通但重要的信息<br /></li><li>nowatchdog : 禁用watchdog机制, watchdog可以在系统挂起或失去响应的情况下系统重启, 但不利于排查错误.<br /></li><li>nvidia_drm.modeset=1 : 如果使用N卡, 在最后加入参数, 开启 DRM.</li></ul></blockquote><p>更多参数可以查阅 <span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy9kb2MvaHRtbC92NC4xNC9hZG1pbi1ndWlkZS9rZXJuZWwtcGFyYW1ldGVycy5odG1s">Thekernel’s command-line parameters<i class="fa fa-external-link-alt"></i></span>.</p><h4 id="完成安装">完成安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出chroot的环境</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启后就会进入我们刚刚安装好的系统.一个无桌面的控制台ArchLinux安装完成.</p><h2 id="安装桌面环境">安装桌面环境</h2><p>对刚装好的Arch进行一些基本的配置后进行桌面的安装.</p><h4 id="连接网络-1">连接网络</h4><p>先开启 DHCP 服务.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start dhcpcd</span><br></pre></td></tr></table></figure> 如果使用无线网再开启 iwd 服务.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start iwd</span><br></pre></td></tr></table></figure></p><h4 id="pacman-颜色与多线程">Pacman 颜色与多线程</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /etc/pacman.conf</span><br></pre></td></tr></table></figure><p>编辑pacman.conf将<strong>Color</strong>与<strong>ParallelDownloads</strong>的注释去掉.</p><h4 id="准备一个非-root-用户">准备一个非 root 用户</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash username  </span><br><span class="line">passwd username </span><br></pre></td></tr></table></figure><p>修改sudoers配置, 让wheel组用户能够使用sudo执行任何命令.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">EDITOR=nvim visudo <span class="comment"># 去掉 %wheel ALL=(ALL:ALL) ALL前的注释</span></span><br></pre></td></tr></table></figure></p><h4 id="安装网络管理工具">安装网络管理工具</h4><p>安装NetworkManager后就可以使用桌面点击右上角图标连接wifi了.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S networkmanager</span><br><span class="line">systemctl <span class="built_in">disable</span> iwd</span><br><span class="line">systemctl stop iwd</span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager</span><br></pre></td></tr></table></figure></p><h4 id="设置交换文件可选">设置交换文件(可选)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1M count=4096 status=progress <span class="comment">#创建4G的交换空间 大小根据需要自定</span></span><br><span class="line"><span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line">mkswap /swapfile <span class="comment">#格式化swap文件</span></span><br><span class="line">swapon /swapfile <span class="comment">#启用swap文件</span></span><br><span class="line">nvim /etc/fstab <span class="comment"># 文件末尾添加行 /swapfile none swap defaults 0 0</span></span><br></pre></td></tr></table></figure><h4 id="开启32位库支持可选">开启32位库支持(可选)</h4><p>可以安装 multilib 库中的32位程序.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim /etc/pacman.conf  <span class="comment"># 去掉 [multilib] 一节中的两行注释</span></span><br><span class="line">pacman -Syyu</span><br></pre></td></tr></table></figure></p><h4 id="安装-gnome">安装 Gnome</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S gnome wayland</span><br><span class="line">systemctl <span class="built_in">enable</span> gdm</span><br></pre></td></tr></table></figure><p>安装过程比较长, 重启后就会进入登录界面了.</p><h2 id="结尾">结尾</h2><p>  一个桌面环境就安装完了, 在你熟悉了的情况下依靠命令行也能很快的完成.要特别记得Arch是滚动更新, 每天记得<code>pacman -Syyu</code>,不然太久不更新系统滚挂的风险很高.另外如果遇到系统进不去了的情况可以使用前面安装基本操作系统中挂载使用<code>arch-chroot</code>的方法进入系统进行调整.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ArchLinux是一个以简洁, 高效, 用户完全控制为目标的Linux发行版,
非常适合喜欢自定义系统的朋友. 文章分成了三个部分, 系统安装 + 软件安装 +
桌面美化. 本篇记录了ArchLinux基本系统以及桌面环境的安装步骤.</summary>
    
    
    
    <category term="linux" scheme="https://esyruok.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Pages + Hexo + NexT 搭建博客(配置篇)</title>
    <link href="https://esyruok.github.io/posts/e3e38b21/"/>
    <id>https://esyruok.github.io/posts/e3e38b21/</id>
    <published>2024-01-06T17:26:48.000Z</published>
    <updated>2024-06-10T03:13:13.320Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇博客中只记录了搭建过程, 这篇文章会记录一下对 Hexo 与 NexT的配置. <span id="more"></span></p><blockquote><p>原本是想通过这篇文章一边学习一边写下每一项配置的意义和配置方法,不知不觉写了巨长的篇幅, 有些过于冗长, 自己看都看不下去.文章的本意是帮助快速的完成一个基本的配置, 所以文章会精简一些,只记录我认为比较常用且重要的配置,日后再折腾的时候不用再去一层一层的查找文档.<br />想细致学习的同学不用着急, 在配置文件中官方原本就附带了注释内容,比较清晰且附带了官方文档的链接地址.完整读一遍配置文件就可了解到所有的配置内容.</p></blockquote><h2 id="hexo-配置-_config.yml">Hexo 配置 (_config.yml)</h2><h3 id="site">Site</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">title</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">subtitle</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">description</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">keywords</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">author</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>配置项的 key 名称即内容简单易懂. <strong>title, subtitle,description, author</strong> 这四项是可以显示在界面上的,填上看看效果然后根据自己的意愿修改内容即可. 如果你想使用多语言,<strong>language</strong> 将你想使用的语言都写上.</p><h3 id="url">URL</h3><h5 id="永久链接">永久链接</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span> <span class="comment"># 我这里使用了 hexo-abbrlink 插件</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>permalinks 是指文章路径的形式, 例如:<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一篇文章在 source/_post/hello-world.md</span></span><br><span class="line"><span class="string">permalinks:year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># 生成静态文件后文章的路径为 2013/07/14/hello-world/</span></span><br></pre></td></tr></table></figure> 可使用的变量查看 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvcGVybWFsaW5rcw==">Permalinks<i class="fa fa-external-link-alt"></i></span>.<br />我所使用的 <strong>hexo-abbrlink</strong> 变量是插件提供的,使用文章的时间与文件名计算 hash 值来作为变量值.<strong>pretty_urls</strong> 中的两选项要你配置了 permalinks 中使用了index.html 才有意义. 修改看不出效果的不要疑惑哈.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># permalink: posts/:abbrlink/index.html 这样链接中才会有 index.html 让你来美化</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">    <span class="attr">trailing_index:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="attr">trailing_html:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure></p><h5 id="hexo-abbrlink">hexo-abbrlink</h5><p>安装插件模块:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure> 添加配置:<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"> <span class="attr">alg:</span> <span class="string">crc32</span>      <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line"> <span class="attr">rep:</span> <span class="string">hex</span>        <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure></p><h3 id="文章配置">文章配置</h3><h5 id="默认布局">默认布局</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><p>这影响你使用 <code>hexo new title</code> 时使用的默认布局.</p><h5 id="文章资源文件夹">文章资源文件夹</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>开启文章资源文件夹, 开启 post_asset_folder 后, 在你进行 hexo new创建文章时会自动帮你创建文章资源文件夹.</p><blockquote><p>hexo 中资源文件夹有两种形式, 全局资源文件夹和文章资源文件夹.<br />- 全局资源文件夹<br />比如说你需要一个存放图片资源的地方那么可以建立一个目录存放<code>source/images</code>, 在文章中通过<code>![](/images/image.jpg)</code> 引用,所有文章都可以以这个路径引用.<br />- 文章资源文件夹<br />如果博客中的图片非常多全放在一个目录中就非常乱了.文章资源文件夹就是创建一个与你文章同名的目录, 比如<code>source/hello-world</code>, 在文章中通过相对路径<code>![](image.jpg)</code> 引用.只有这个这个文章可以使用这个相对路径.</p></blockquote><h5 id="代码高亮引擎">代码高亮引擎</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax_highlighter: highlight.js </span><br></pre></td></tr></table></figure><p>自带两种高亮引擎, 选自你使用的写上名称即可.</p><h5 id="分页目录">分页目录</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pagination_dir:</span> <span class="string">pages</span></span><br><span class="line"><span class="comment"># 翻页后的URL : http://example.com/pages/2</span></span><br></pre></td></tr></table></figure><p><strong>pagination_dir</strong> 是当你的文章列表翻页后 URL的形式.</p><h5 id="类别与标签">类别与标签</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br></pre></td></tr></table></figure><p>默认分类, 当你没有给文章分类信息时, 那么它就属于这个默认分类.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">category_map:</span> </span><br><span class="line">  <span class="attr">tech:</span> <span class="string">Technology</span></span><br><span class="line">  <span class="attr">jishu:</span> <span class="string">Technology</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br></pre></td></tr></table></figure> 分类和标签别名,可以将多个分类/标签映射成一个分类/标签.</p><h2 id="next-配置-_config.next.yml">NexT 配置 (_config.next.yml)</h2><h3 id="主题">主题</h3><h5 id="布局">布局</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><p>NexT 提供了四种布局样式,官方提仓库提供了一些例子可以对每种样式进行一个大概的预览再选择. <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvYXdlc29tZS1uZXh0I2xpdmUtcHJldmlldw==">awesome-next<i class="fa fa-external-link-alt"></i></span>.</p><h5 id="深色模式">深色模式</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>深色模式, 开启就可以跟据浏览器的亮暗模式自动进行切换.</p><h5 id="图标">图标</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br></pre></td></tr></table></figure><p>这个是标签页上的那个小图标. 可以将自定义图标放在 source/images目录当中并且修改配置上文件名.</p><h5 id="主题颜色">主题颜色</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme_color:</span> </span><br><span class="line">  <span class="attr">light:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="attr">dark:</span> <span class="string">&quot;#222&quot;</span></span><br></pre></td></tr></table></figure><p>主题颜色, 就是 title 后面很小一部分.</p><h5 id="代码块高亮主题">代码块高亮主题</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">base16/silk-light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">vs2015</span></span><br></pre></td></tr></table></figure><p>代码高亮主题, 可以通过给的网址去预览各种主题, 将选好的名称添上.</p><h5 id="背景丝带">背景丝带</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure><p>在背景画布上装饰一个可变化的丝带.</p><h3 id="菜单">菜单</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br></pre></td></tr></table></figure><p>默认支持的菜单只有 home 和 archives. 不过 NexT支持我们自定义创建菜单项目.</p><blockquote><ul><li>创建自定义页面<br /></li></ul><ol type="1"><li>使用 hexo new page custom-name 创建一个自定义的页面<br /></li><li>修改新建页面的 index.md 添加 Front-matter 信息与内容<br /></li><li>编辑 menu 配置. (例如:<code>custom: /custom-name/ || fa fa-custom</code>)<br /></li></ol><ul><li>创建 tags 页面<br />一种特殊的自定义页面, tags 页面只需在 index.md 的 Front-matter 信息中将type 设置为 tags, 就可以将所有文章的 tag 显示在页面中.<br /></li><li>创建 categories 页面<br />与 tags 相同, 只是 type = categories.</li></ul></blockquote><p>NexT 还支持动态子菜单, 例如:<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Docs:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">/docs/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-book</span></span><br><span class="line">    <span class="attr">Getting Started:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="string">/getting-started/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-flag</span></span><br><span class="line">      <span class="attr">Installation:</span> <span class="string">/installation.html</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-download</span></span><br><span class="line">      <span class="attr">Configuration:</span> <span class="string">/configuration.html</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-wrench</span></span><br></pre></td></tr></table></figure> 上面的配置方式会在拥有子菜单的页面 (例如 docs )上方产生相应的子菜单.</p><h3 id="侧边栏">侧边栏</h3><h5 id="头像">头像</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>头像, 更改方式和 favicon 相同.</p><h5 id="站点状态">站点状态</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>将文章,标签, 类别数量显示在侧边栏当中.</p><h5 id="社交链接">社交链接</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment">#GitHub: https://github.com/yourname || fab fa-github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br></pre></td></tr></table></figure><p>侧边栏中添加一些社交账号的图标, 点击可以快速导航.</p><h5 id="友情链接">友情链接</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">Title:</span> <span class="string">https://example.com</span> <span class="comment"># 友情链接的title和链接, 如果没有则不会显示友情链接块</span></span><br></pre></td></tr></table></figure><p>友情链接, 出现在侧边栏下方.</p><h5 id="公共版权许可">公共版权许可</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure><p>版权许可信息, sidebar 设置让你在侧边栏中有个图标, post设置让你的许可信息出现在每篇文章的末尾.</p><h3 id="页脚">页脚</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>页面最底部显示的一系列信息.</p><h3 id="文章">文章</h3><h5 id="目录">目录</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>文章目录, 浏览文章时, 会自动根据 Markdown格式在侧边栏相同的位置产生一个目录</p><h5 id="摘要">摘要</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>控制文章摘要的方式, 如果使用 true 则要在文章中使用 description变量来储存摘要, false 则在文章内容中添加 <code>&lt;!--more--&gt;</code>来表示标签之前的内容为摘要. 建议使用 false.</p><h5 id="阅读全文">阅读全文</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><p>文章列表中显示"阅读全文"按钮.</p><h5 id="文章属性显示">文章属性显示</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br></pre></td></tr></table></figure><p>这部分是选择展示出来的文件属性. 可以在文章列表中看到,也可以在文章详情看到, 都是在标题下方.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span> <span class="comment"># 字数统计,阅读时间</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure> 字数统计与大概阅读时间. 显示位置与 post_meta 相同.需要额外安装插件模块:<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure> <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure> tag 会显示在文章底部, true 表示在 tag前使用图标, false 是使用一个 #</p><h5 id="打赏按钮">打赏按钮</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line"><span class="attr">reward:</span></span><br></pre></td></tr></table></figure><p>文章末尾添加一个打赏按钮.</p><h5 id="follow-me">Follow Me</h5><p>文章内版本的 social. <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br></pre></td></tr></table></figure> 这个也是显示在文章末尾.</p><h5 id="返回顶部按钮">返回顶部按钮</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>左下角一个返回顶部按钮.</p><h5 id="阅读进入条">阅读进入条</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>阅读文章时, 顶部有一个带颜色的阅读进度条.</p><h3 id="插件">插件</h3><h5 id="数学公式渲染">数学公式渲染</h5><p>math 配置提供渲染 Markdown 中数学公式的能力.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span> <span class="comment"># `mathjax: true`</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure> every_page 代表是否要每个页面都加载渲染引擎, 如果设置成false 需要在想要进行公式渲染页面的 Front-matter 中手动添加 mathjax: true开启渲染.<br />使用 mathjax 需要卸载 Hexo 原有的渲染器改用 hexo-renderer-pandoc.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo pacman -S pandoc # 渲染器依赖 pandoc</span></span><br><span class="line"><span class="comment"># npm un hexo-renderer-marked</span></span><br><span class="line"><span class="comment"># npm i hexo-renderer-pandoc --save</span></span><br><span class="line"><span class="comment"># hexo clean &amp;&amp; hexo s</span></span><br></pre></td></tr></table></figure></p><h5 id="loacal-search">Loacal Search</h5><p>搜索功能, 它会出现在菜单上.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure> Hexo 配置.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure> NexT 配置.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h5 id="rss">RSS</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>配置文件, 配置在 Hexo 或 NexT 哪个配置里都行.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span> </span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span> </span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span> </span><br></pre></td></tr></table></figure> 页面链接可以添加在 menu , follow 或 social 中都可以.<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure></p><p>Ok, 一个包括所有基本 DIY 配置的博客就搭建完成了.当然还有很多关于性能, SEO, CDN 等配置感兴趣的同学继续加油!</p><h2 id="终极美化大法">终极美化大法</h2><p>对于想要尽情挥洒创意的同学, 配置文件中有一项非常重要的部分custom_file_path. 它可以让你自己通过 css 去设定样式.</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>取消注释并创建对应的文件后, 浏览器按下 F12 对照布局尽情创作吧.作者不是太懂这方面都是网上翻着例子文档照葫芦画瓢就不班门弄斧了.<br />最后推荐几个素材网站. (吐槽一下:某些网站真是无语不是要注册就是要会员)<br /><span class="exturl" data-url="aHR0cHM6Ly9pY29uczguY29tL2ljb25z">icons<i class="fa fa-external-link-alt"></i></span> | <span class="exturl" data-url="aHR0cHM6Ly93d3cucG5nZWdnLmNvbS8=">pngegg<i class="fa fa-external-link-alt"></i></span><br />还有个颜色代码工具, 相信你们会用到的 :)<br /><span class="exturl" data-url="aHR0cHM6Ly9odG1sY29sb3Jjb2Rlcy5jb20vemgv">HTML颜色代码<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在上一篇博客中只记录了搭建过程, 这篇文章会记录一下对 Hexo 与 NexT
的配置.</summary>
    
    
    
    <category term="hexo" scheme="https://esyruok.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Pages + Hexo + NexT 博客搭建 (搭建篇)</title>
    <link href="https://esyruok.github.io/posts/6b2ed3a/"/>
    <id>https://esyruok.github.io/posts/6b2ed3a/</id>
    <published>2023-12-31T16:12:25.000Z</published>
    <updated>2024-06-10T03:13:13.320Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下小白使用 GitHub Pages + Hexo + NexT 搭建博客的方法与使用方式,作为笔记方便不熟悉时进行查阅. 由于作者不懂前端, 所以DIY 程度有限,仅限于一些基本的配置, 本博客就是搭建的成果可以作为参考. <span id="more"></span>使用的环境是 ArchLinux, 其他版本的系统除了基本工具安装外步骤应该相同,也可以进一步查阅官方文档.<br /><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv">Hexo文档<i class="fa fa-external-link-alt"></i></span> | <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzLw==">NexT文档<i class="fa fa-external-link-alt"></i></span></p><h2 id="站点搭建">站点搭建</h2><ol type="1"><li><p>安装Git/Nodejs/npm.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S git nodejs npm </span><br></pre></td></tr></table></figure></p></li><li><p>安装 Hexo.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p></li><li><p>创建 Hexo 站点.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init hexo-site</span><br><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure> <strong>hexo-site</strong> 目录中会出现一个<strong>_config.yml</strong> 文件, 后面提到的 <strong>Hexo配置文件</strong> 就是指这个文件.<br /></p></li><li><p>生成静态文件 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><blockquote><p>简写 hexo g</p></blockquote></li><li><p>启动本地服务器 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server </span><br></pre></td></tr></table></figure></p><blockquote><p>简写 hexo s</p></blockquote><p>控制台会显示一个本地的 http 地址来让你预览站点.</p><blockquote><p>Options:<br />--safe 安全模式, 不加载插件<br />--debug 在终端中显示调试信息<br />--silent 简介模式, 隐藏终端信息<br />--draft 显示草稿</p></blockquote></li></ol><p>Ok! 一个毛坯站点就这样完成了.</p><h2 id="文章管理">文章管理</h2><ol type="1"><li><p>新建文章 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure> <strong>new</strong> 命令格式为<strong>hexo new [layout] &lt;title&gt;</strong>,<strong>layout</strong> 为可选参数, hexo 默认有三种方案 <strong>post /draft / page</strong>.</p><blockquote><ul><li>post<br />代表你要创建一个要发布的文章, 命令直接在 <strong>source/_post/</strong>下建立一个 <strong>&lt;title&gt;.md</strong> 文件.<br /></li><li>draft<br />代表你要创建一个草稿, 命令在 <strong>source/_draft/</strong> 下建立一个<strong>&lt;title&gt;.md</strong> 文件.</li><li>page<br />方案代表要创建一个页面,命令在 <strong>source/</strong> 下创建一个<strong>&lt;title&gt;</strong> 目录, 并在目录中产生一个<strong>index.md</strong> 文件.</li></ul></blockquote><p>如果不使用 layout 参数, 则默认使用在 **_config.yml** 配置文件中<strong>default_layout</strong> 项所设置的方案, 初始状态为<strong>post</strong>.<br /><strong>&lt;title&gt;</strong> 如果包含空格需要用引号括起来<strong>"Hello World"</strong>.<br />接下来就可以在新建的文件中使用 Markdown 来书写文章内容了.如果想删除文章直接删除对应的文件即可.<br /></p></li><li><p>发表草稿 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;filename&gt;</span><br></pre></td></tr></table></figure> <strong>publish</strong>操作是将你的文章从 <strong>_draft</strong> 文件夹移动到<strong>_post</strong> 文件夹.<br /></p></li><li><p>Front-matter<br />使用 <strong>Hexo new</strong> 创建的文章会根据模板携带<strong>Front-matter</strong>. 指的是文件最上方以 <strong>---</strong>分隔的区域, 用于指定当前文件的一些变量.<br /><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">data: 2013/9/13 12:45:11</span><br></pre></td></tr></table></figure> 它们会对应一些 Hexo 功能的使用, 比如创建页面时需要使用<strong>updated</strong> 来展示更新时间, <strong>tag</strong> 和<strong>categories</strong>为文章添加标签和分类属性以便参与标签分类的统计与分类展示.<br /></p></li><li><p>修改 Hexo 配置文件<br />修改 **_config.yml** 文件选择使用的主题.<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">theme:next</span></span><br></pre></td></tr></table></figure></p></li><li><p>主题配置文件<br />官方文档建议使用 <strong>Alternate Theme Config</strong> 进行配置,大概意思就是除了主题模块中所携带的配置文件外,还可以在另一个约定好的位置有另一份配置文件,这样可以避免主题升级时将配置文件覆盖. 要求这个文件与 Hexo配置文件在同一级目录, 并且文件名必须是 **_config.next.yml**.我们可以使用下列命令来生成配置文件.<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pwd : hexo-site/</span></span><br><span class="line"><span class="built_in">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure></p></li><li><p>升级NexT主题 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="站点部署">站点部署</h2><p>这里我们除了使用 GitHub Pages 作为部署工具外, 还将使用 Github作为多端同步的手段. 多端同步的思路大致是, 使用 GitHub 的 master分支来存放源代码, 使用 page 分支来作为 Pages 的部署分支. 用 master分支编写文章, page 分支部署站点.</p><ol type="1"><li>创建 GitHub 仓库<br />仓库名必须是 <strong><username>.github.io</strong> 其中 username 是指GitHub 的用户名. 仓库必须是 Public 或者您是 Github Pro.<br /></li><li>提交源代码到 master<br /><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">git init</span><br><span class="line">git branch -M master</span><br><span class="line">git add .gitginore</span><br><span class="line">git commit -m <span class="string">&quot;init site source&quot;</span></span><br><span class="line">git remote add origin git@github.com:Username/Username.github.io.git</span><br><span class="line">git checkout -b page </span><br><span class="line"><span class="built_in">rm</span> .gitginore</span><br><span class="line">git commit -m <span class="string">&quot;clean page repo&quot;</span></span><br><span class="line">git push origin master</span><br><span class="line">git push origin page</span><br></pre></td></tr></table></figure> 稍微有一点繁琐, 因为我们需要两个分支, 而 Git不能推送一个空的仓库上去, 也不能创建空的分支, 所以我利用 .gitginore创造一条记录, 创建完 page分支后又将该文件删除来创造两个需要的分支.<br />page 分支创造好后就可以将 <strong>hexo-site</strong> 下的内容提交到master 分支上了.<br /></li><li>安装部署工具 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>配置部署参数 打开 Hexo 配置文件寻找 <strong>deploy</strong>部分.格式如下:<br /><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span> </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">page</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure> 如果你想使用 ssh 来连接, <strong>repo</strong> 使用 ssh连接即可.<br /><strong>message</strong> 是自定义提交信息, 如果不设置有默认格式.<br /></li><li>部署至远程库 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure> 这个动作会产生一个<strong>.deploy_git</strong> 目录, 并可能提示你去配置一些 git 设置,最终会将站点的静态文件推送到指定的分支当中.<br /></li><li>设置 Pages<br />登入 Github 进入仓库 -&gt; Setting -&gt; Pages.<br />Build and deployment 下的 Source 选择 Deploy from a branch, Branch下选择使用的分支 <code>page</code>.</li></ol><p>大功告成了.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下小白使用 GitHub Pages + Hexo + NexT 搭建博客的方法与使用方式,
作为笔记方便不熟悉时进行查阅. 由于作者不懂前端, 所以DIY 程度有限,
仅限于一些基本的配置, 本博客就是搭建的成果可以作为参考.</summary>
    
    
    
    <category term="hexo" scheme="https://esyruok.github.io/categories/hexo/"/>
    
    
  </entry>
  
</feed>
